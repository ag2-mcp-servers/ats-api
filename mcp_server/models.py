# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:41:14+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, EmailStr, Field, RootModel, constr


class Type(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    office = 'office'
    shipping = 'shipping'
    billing = 'billing'
    other = 'other'


class Anonymized(RootModel[bool]):
    root: bool = Field(..., examples=[True], title='Anonymized')


class SocialLink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[str] = Field(None, examples=['twitter'])
    url: constr(min_length=1) = Field(
        ..., examples=['https://www.twitter.com/apideck-io']
    )


class Type1(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    other = 'other'


class Website(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[Type1] = Field(None, examples=['primary'])
    url: constr(min_length=1) = Field(..., examples=['http://example.com'])


class ApplicantsFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    job_id: Optional[str] = Field(
        None, description='Id of the job to filter on', examples=['1234']
    )


class Archived(RootModel[bool]):
    root: bool = Field(..., examples=[False], title='Archived')


class AtsEventType(Enum):
    ats_job_created = 'ats.job.created'
    ats_job_updated = 'ats.job.updated'
    ats_job_deleted = 'ats.job.deleted'
    ats_applicant_created = 'ats.applicant.created'
    ats_applicant_updated = 'ats.applicant.updated'
    ats_applicant_deleted = 'ats.applicant.deleted'


class AtsWebhookEvent(BaseModel):
    entity_id: Optional[str] = Field(
        None,
        description="The service provider's ID of the entity that triggered this event",
        examples=['123456ASDF'],
    )
    entity_type: Optional[str] = Field(
        None,
        description='The type entity that triggered this event',
        examples=['Company'],
    )
    entity_url: Optional[str] = Field(
        None,
        description='The url to retrieve entity detail.',
        examples=['https://unify.apideck.com/crm/contacts/123456'],
    )
    event_id: Optional[str] = Field(
        None,
        description='Unique reference to this request event',
        examples=['9755c355-56c3-4a2f-a2da-86ff4411fccb'],
    )
    execution_attempt: Optional[float] = Field(
        None,
        description='The current count this request event has been attempted',
        examples=[2],
    )
    occurred_at: Optional[str] = Field(
        None,
        description='ISO Datetime for when the original event occurred',
        examples=['2021-10-01T03:14:55.419Z'],
    )
    service_id: Optional[str] = Field(
        None, description='Service provider identifier', examples=['close']
    )
    event_type: Optional[AtsEventType] = None


class BadRequestResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestvalidationerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestValidationError'],
    )


class Code(RootModel[str]):
    root: str = Field(..., description='The code of the job.', examples=['123-OC'])


class CreatedAt(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The date and time when the object was created.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Created at (timestamp)',
    )


class CreatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who created the object.',
        examples=['12345'],
        title='Created by',
    )


class Currency(Enum):
    UNKNOWN_CURRENCY = 'UNKNOWN_CURRENCY'
    AED = 'AED'
    AFN = 'AFN'
    ALL = 'ALL'
    AMD = 'AMD'
    ANG = 'ANG'
    AOA = 'AOA'
    ARS = 'ARS'
    AUD = 'AUD'
    AWG = 'AWG'
    AZN = 'AZN'
    BAM = 'BAM'
    BBD = 'BBD'
    BDT = 'BDT'
    BGN = 'BGN'
    BHD = 'BHD'
    BIF = 'BIF'
    BMD = 'BMD'
    BND = 'BND'
    BOB = 'BOB'
    BOV = 'BOV'
    BRL = 'BRL'
    BSD = 'BSD'
    BTN = 'BTN'
    BWP = 'BWP'
    BYR = 'BYR'
    BZD = 'BZD'
    CAD = 'CAD'
    CDF = 'CDF'
    CHE = 'CHE'
    CHF = 'CHF'
    CHW = 'CHW'
    CLF = 'CLF'
    CLP = 'CLP'
    CNY = 'CNY'
    COP = 'COP'
    COU = 'COU'
    CRC = 'CRC'
    CUC = 'CUC'
    CUP = 'CUP'
    CVE = 'CVE'
    CZK = 'CZK'
    DJF = 'DJF'
    DKK = 'DKK'
    DOP = 'DOP'
    DZD = 'DZD'
    EGP = 'EGP'
    ERN = 'ERN'
    ETB = 'ETB'
    EUR = 'EUR'
    FJD = 'FJD'
    FKP = 'FKP'
    GBP = 'GBP'
    GEL = 'GEL'
    GHS = 'GHS'
    GIP = 'GIP'
    GMD = 'GMD'
    GNF = 'GNF'
    GTQ = 'GTQ'
    GYD = 'GYD'
    HKD = 'HKD'
    HNL = 'HNL'
    HRK = 'HRK'
    HTG = 'HTG'
    HUF = 'HUF'
    IDR = 'IDR'
    ILS = 'ILS'
    INR = 'INR'
    IQD = 'IQD'
    IRR = 'IRR'
    ISK = 'ISK'
    JMD = 'JMD'
    JOD = 'JOD'
    JPY = 'JPY'
    KES = 'KES'
    KGS = 'KGS'
    KHR = 'KHR'
    KMF = 'KMF'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KYD = 'KYD'
    KZT = 'KZT'
    LAK = 'LAK'
    LBP = 'LBP'
    LKR = 'LKR'
    LRD = 'LRD'
    LSL = 'LSL'
    LTL = 'LTL'
    LVL = 'LVL'
    LYD = 'LYD'
    MAD = 'MAD'
    MDL = 'MDL'
    MGA = 'MGA'
    MKD = 'MKD'
    MMK = 'MMK'
    MNT = 'MNT'
    MOP = 'MOP'
    MRO = 'MRO'
    MUR = 'MUR'
    MVR = 'MVR'
    MWK = 'MWK'
    MXN = 'MXN'
    MXV = 'MXV'
    MYR = 'MYR'
    MZN = 'MZN'
    NAD = 'NAD'
    NGN = 'NGN'
    NIO = 'NIO'
    NOK = 'NOK'
    NPR = 'NPR'
    NZD = 'NZD'
    OMR = 'OMR'
    PAB = 'PAB'
    PEN = 'PEN'
    PGK = 'PGK'
    PHP = 'PHP'
    PKR = 'PKR'
    PLN = 'PLN'
    PYG = 'PYG'
    QAR = 'QAR'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    RWF = 'RWF'
    SAR = 'SAR'
    SBD = 'SBD'
    SCR = 'SCR'
    SDG = 'SDG'
    SEK = 'SEK'
    SGD = 'SGD'
    SHP = 'SHP'
    SLL = 'SLL'
    SOS = 'SOS'
    SRD = 'SRD'
    SSP = 'SSP'
    STD = 'STD'
    SVC = 'SVC'
    SYP = 'SYP'
    SZL = 'SZL'
    THB = 'THB'
    TJS = 'TJS'
    TMT = 'TMT'
    TND = 'TND'
    TOP = 'TOP'
    TRC = 'TRC'
    TRY = 'TRY'
    TTD = 'TTD'
    TWD = 'TWD'
    TZS = 'TZS'
    UAH = 'UAH'
    UGX = 'UGX'
    USD = 'USD'
    USN = 'USN'
    USS = 'USS'
    UYI = 'UYI'
    UYU = 'UYU'
    UZS = 'UZS'
    VEF = 'VEF'
    VND = 'VND'
    VUV = 'VUV'
    WST = 'WST'
    XAF = 'XAF'
    XAG = 'XAG'
    XAU = 'XAU'
    XBA = 'XBA'
    XBB = 'XBB'
    XBC = 'XBC'
    XBD = 'XBD'
    XCD = 'XCD'
    XDR = 'XDR'
    XOF = 'XOF'
    XPD = 'XPD'
    XPF = 'XPF'
    XPT = 'XPT'
    XTS = 'XTS'
    XXX = 'XXX'
    YER = 'YER'
    ZAR = 'ZAR'
    ZMK = 'ZMK'
    ZMW = 'ZMW'
    BTC = 'BTC'
    ETH = 'ETH'


class CustomField(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        None,
        description='More information about the custom field',
        examples=['Employee Level'],
        title='Description',
    )
    id: str = Field(..., examples=['2389328923893298'], title='ID')
    name: Optional[str] = Field(
        None,
        description='Name of the custom field.',
        examples=['employee_level'],
        title='Name',
    )
    value: Optional[Union[str, float, bool, List[str]]] = None


class Deleted(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(None, examples=[True], title='Deleted')


class DeletedAt(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        None,
        description='The time at which the object was deleted.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Deleted at (timestamp)',
    )


class DeletedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who deleted the object.',
        examples=['12345'],
        title='Deleted by',
    )


class Description(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A description of the object.',
        examples=['A description'],
        title='Description',
    )


class Type2(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    billing = 'billing'
    other = 'other'


class Email(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: EmailStr = Field(..., examples=['elon@musk.com'])
    id: Optional[str] = Field(None, examples=['123'])
    type: Optional[Type2] = Field(None, examples=['primary'])


class Id(RootModel[str]):
    root: str = Field(
        ...,
        description='A unique identifier for an object.',
        examples=['12345'],
        title='ID',
    )


class Initials(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The initials of the person, usually derived from their first, middle, and last names.',
        examples=['EM'],
        title='Initials',
    )


class Block(BaseModel):
    content: Optional[str] = None
    title: Optional[str] = None


class Branch(BaseModel):
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None, description='Name of the branch.', examples=['HQ NY']
    )


class EmploymentTerms(Enum):
    full_time = 'full-time'
    part_time = 'part-time'
    internship = 'internship'
    contractor = 'contractor'
    employee = 'employee'
    freelance = 'freelance'
    temp = 'temp'
    seasonal = 'seasonal'
    volunteer = 'volunteer'
    other = 'other'


class HiringManager(BaseModel):
    id: Optional[str] = Field(None, examples=['12345'])


class Salary(BaseModel):
    currency: Optional[Currency] = None
    max: Optional[int] = Field(
        None, description='Maximum salary payable for the job role.', examples=[10000]
    )
    min: Optional[int] = Field(
        None, description='Minimum salary payable for the job role.', examples=[8000]
    )


class Visibility(Enum):
    public = 'public'
    internal = 'internal'


class JobStatus(Enum):
    draft = 'draft'
    internal = 'internal'
    published = 'published'
    completed = 'completed'
    on_hold = 'on-hold'
    private = 'private'


class JobsFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    job_id: Optional[str] = Field(
        None, description='Id of the job to filter on', examples=['1234']
    )


class Language(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='language code according to ISO 639-1. For the United States - EN',
        examples=['EN'],
    )


class LastInteractionAt(RootModel[datetime]):
    root: datetime = Field(
        ...,
        examples=['2020-09-30T07:43:32.000Z'],
        title='Last interaction at (timestamp)',
    )


class Links(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Link to navigate to the current page through the API',
        examples=['https://unify.apideck.com/crm/companies'],
    )
    next: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
        ],
    )
    previous: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
        ],
    )


class Cursors(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Cursor to navigate to the current page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjI='],
    )
    next: Optional[str] = Field(
        None,
        description='Cursor to navigate to the next page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjM='],
    )
    previous: Optional[str] = Field(
        None,
        description='Cursor to navigate to the previous page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjE='],
    )


class Meta(BaseModel):
    cursors: Optional[Cursors] = Field(
        None,
        description='Cursors to navigate to previous or next pages through the API',
    )
    items_on_page: Optional[int] = Field(
        None,
        description='Number of items returned in the data property of the response',
        examples=[50],
    )


class NotFoundResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Found'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unknown Widget'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#entitynotfounderror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[404]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['EntityNotFoundError']
    )


class NotImplementedResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Implemented'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unmapped Attribute'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#mappingerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[501]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['MappingError']
    )


class OwnerId(RootModel[str]):
    root: str = Field(..., examples=['54321'], title='Owner ID')


class PaymentRequiredResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=['You have reached your limit of 2000'],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Payment Required'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Request Limit Reached'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestlimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[402]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['RequestLimitError']
    )


class Type3(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    work = 'work'
    office = 'office'
    mobile = 'mobile'
    assistant = 'assistant'
    fax = 'fax'
    direct_dial_in = 'direct-dial-in'
    personal = 'personal'
    other = 'other'


class PhoneNumber(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    area_code: Optional[str] = Field(None, examples=['323'], title='Area code')
    country_code: Optional[str] = Field(None, examples=['1'], title='Country code')
    extension: Optional[str] = Field(None, examples=['105'], title='Phone extension')
    id: Optional[str] = Field(None, examples=['12345'])
    number: constr(min_length=1) = Field(
        ..., examples=['111-111-1111'], title='Phone number'
    )
    type: Optional[Type3] = Field(None, examples=['primary'])


class PublishedAt(RootModel[datetime]):
    root: datetime = Field(
        ..., examples=['2020-09-30T07:43:32.000Z'], title='Published at (timestamp)'
    )


class RecordUrl(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None, examples=['https://app.intercom.io/contacts/12345'], title='Record URL'
    )


class RowVersion(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.',
        examples=['1-12345'],
        title='Row version',
    )


class Tags(RootModel[List[str]]):
    root: List[str] = Field(..., examples=[['New']])


class Title(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The job title of the person.',
        examples=['CEO'],
        title='Job title',
    )


class Detail(BaseModel):
    context: Optional[str] = None
    error: Optional[Dict[str, Any]] = None


class TooManyRequestsResponse(BaseModel):
    detail: Optional[Detail] = None
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)',
        examples=['Too Many Requests'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Connector Rate Limit Error'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#connectorratelimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[429]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['ConnectorRateLimitError'],
    )


class UnauthorizedResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Failed to generate valid JWT Session. Verify applicationId is correct'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unauthorized'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unauthorized Request'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[401]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['UnauthorizedError']
    )


class UnexpectedErrorResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestHeadersValidationError'],
    )


class UnifiedId(BaseModel):
    id: str = Field(
        ...,
        description='The unique identifier of the resource',
        examples=['12345'],
        title='Id',
    )


class UnprocessableResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Unprocessable request, please verify your request headers and body.'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unprocessable Entity'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid State'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#invalidstateerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[422]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['InvalidStateError']
    )


class UpdateJobResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Jobs']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdatedAt(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        None,
        description='The date and time when the object was last updated.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Updated at (timestamp)',
    )


class UpdatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who last updated the object.',
        examples=['12345'],
        title='Updated by',
    )


class Url(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ...,
        description='The url pointing to the job.',
        examples=['https://downstreamconnector.com/job?id=123'],
    )


class Address(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    city: Optional[str] = Field(
        None, description='Name of city.', examples=['San Francisco']
    )
    contact_name: Optional[str] = Field(None, examples=['Elon Musk'])
    country: Optional[str] = Field(
        None,
        description='country code according to ISO 3166-1 alpha-2.',
        examples=['US'],
    )
    county: Optional[str] = Field(
        None,
        description='Address field that holds a sublocality, such as a county',
        examples=['Santa Clara'],
    )
    email: Optional[str] = Field(None, examples=['elon@musk.com'])
    fax: Optional[str] = Field(None, examples=['122-111-1111'])
    id: Optional[str] = Field(None, examples=['123'])
    latitude: Optional[str] = Field(None, examples=['40.759211'])
    line1: Optional[str] = Field(
        None,
        description='Line 1 of the address e.g. number, street, suite, apt #, etc.',
        examples=['Main street'],
    )
    line2: Optional[str] = Field(
        None, description='Line 2 of the address', examples=['apt #']
    )
    line3: Optional[str] = Field(
        None, description='Line 3 of the address', examples=['Suite #']
    )
    line4: Optional[str] = Field(
        None, description='Line 4 of the address', examples=['delivery instructions']
    )
    longitude: Optional[str] = Field(None, examples=['-73.984638'])
    name: Optional[str] = Field(None, examples=['HQ US'])
    phone_number: Optional[str] = Field(None, examples=['111-111-1111'])
    postal_code: Optional[str] = Field(
        None, description='Zip code or equivalent.', examples=['94104']
    )
    row_version: Optional[RowVersion] = None
    salutation: Optional[str] = Field(None, examples=['Mr'])
    state: Optional[str] = Field(None, description='Name of state', examples=['CA'])
    street_number: Optional[str] = Field(
        None, description='Street number', examples=['25']
    )
    string: Optional[str] = Field(
        None,
        examples=['25 Spring Street, Blackburn, VIC 3130'],
        title="The address string. Some APIs don't provide structured address data.",
    )
    type: Optional[Type] = Field(None, examples=['primary'])
    website: Optional[str] = Field(None, examples=['https://elonmusk.com'])


class Applicant(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addresses: Optional[List[Address]] = None
    anonymized: Optional[Anonymized] = None
    applications: Optional[List[str]] = Field(
        None,
        examples=[
            [
                'a0d636c6-43b3-4bde-8c70-85b707d992f4',
                'a98lfd96-43b3-4bde-8c70-85b707d992e6',
            ]
        ],
    )
    archived: Optional[Archived] = None
    birthday: Optional[date] = Field(
        None,
        description='The date of birth of the person.',
        examples=['2000-08-12'],
        title='Birth Date',
    )
    confidential: Optional[bool] = Field(None, examples=[False], title='Confidential')
    coordinator_id: Optional[str] = Field(
        None, examples=['12345'], title='Coordinator ID'
    )
    cover_letter: Optional[str] = Field(
        None,
        examples=[
            'I submit this application to express my sincere interest in the API developer position. In the previous role, I was responsible for leadership and ...'
        ],
        title='Cover letter',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    custom_fields: Optional[List[CustomField]] = None
    cv_url: Optional[str] = Field(
        None,
        examples=[
            'https://recruitee-main.s3.eu-central-1.amazonaws.com/candidates/36615291/pdf_cv_38swhu4w42k1.pdf?response-content-disposition=inline&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAQYHB7CA5RLR4Y3ON%2F20220514%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20220514T235654Z&X-Amz-Expires=36000&X-Amz-SignedHeaders=host&X-Amz-Signature=72c0621f5976db75b54de487eb821a8e73480d7f2a6a4a9713ab997944b0561f'
        ],
        title='CV URL',
    )
    deleted: Optional[Deleted] = None
    deleted_at: Optional[DeletedAt] = None
    deleted_by: Optional[DeletedBy] = None
    emails: Optional[List[Email]] = None
    first_name: Optional[str] = Field(
        None,
        description='The first name of the person.',
        examples=['Elon'],
        title='First name',
    )
    followers: Optional[List[str]] = Field(
        None,
        examples=[
            [
                'a0d636c6-43b3-4bde-8c70-85b707d992f4',
                'a98lfd96-43b3-4bde-8c70-85b707d992e6',
            ]
        ],
    )
    headline: Optional[str] = Field(
        None,
        description='Typically a list of previous companies where the contact has worked or schools that the contact has attended',
        examples=['PepsiCo, Inc, Central Perk'],
        title='Headline',
    )
    id: Optional[Id] = None
    initials: Optional[Initials] = None
    job_url: Optional[str] = Field(
        None,
        examples=['https://democompany.recruitee.com/o/example-talent-pool'],
        title='Job URL',
    )
    last_interaction_at: Optional[LastInteractionAt] = None
    last_name: Optional[str] = Field(
        None,
        description='The last name of the person.',
        examples=['Musk'],
        title='Last name',
    )
    middle_name: Optional[str] = Field(
        None,
        description='Middle name of the person.',
        examples=['D.'],
        title='Middle name',
    )
    name: Optional[str] = Field(
        None, description='The name of an applicant.', examples=['Elon Musk']
    )
    owner_id: Optional[OwnerId] = None
    phone_numbers: Optional[List[PhoneNumber]] = None
    photo_url: Optional[str] = Field(
        None,
        description='The URL of the photo of a person.',
        examples=['https://unavatar.io/elon-musk'],
        title='Photo URL',
    )
    position_id: Optional[str] = Field(
        None, description='The PositionId the applicant applied for.', examples=['123']
    )
    record_url: Optional[RecordUrl] = None
    recruiter_id: Optional[str] = Field(None, examples=['12345'], title='Recruiter ID')
    rejected_at: Optional[datetime] = Field(
        None, examples=['2020-09-30T07:43:32.000Z'], title='Rejected at (timestamp)'
    )
    social_links: Optional[List[SocialLink]] = None
    source_id: Optional[str] = Field(None, examples=['12345'], title='Source ID')
    sourced_by: Optional[str] = Field(None, examples=['12345'], title='Sourced by')
    sources: Optional[List[str]] = Field(None, examples=[['Job site']])
    stage_id: Optional[str] = Field(None, examples=['12345'], title='Stage')
    tags: Optional[Tags] = None
    title: Optional[Title] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    websites: Optional[List[Website]] = None


class AtsActivity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    id: Optional[Id] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class CreateApplicantResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Applicants']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['lever']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateJobResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Jobs']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteJobResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['delete'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Jobs']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Department(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[str] = Field(None, examples=['2'], title='Code')
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    description: Optional[str] = Field(None, examples=['R&D'], title='Description')
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None, description='Department name', examples=['R&D'], title='Name'
    )
    parent_id: Optional[str] = Field(None, description='Parent ID', examples=['22345'])
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class GetApplicantResponse(BaseModel):
    data: Applicant
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Applicants']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['lever']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetApplicantsResponse(BaseModel):
    data: List[Applicant]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Applicants']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['lever']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Job(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addresses: Optional[List[Address]] = None
    available_to_employees: Optional[bool] = Field(
        None,
        description='Specifies whether an employee of the organization can apply for the job.',
        examples=[False],
        title='Available to employees',
    )
    blocks: Optional[List[Block]] = Field(
        None, examples=[[{'content': 'string', 'title': 'string'}]]
    )
    branch: Optional[Branch] = Field(
        None,
        description='Details of the branch for which the job is created.',
        examples=[{'id': '123', 'name': 'HQ NY'}],
        title='Branch',
    )
    closing: Optional[str] = Field(
        None, examples=['The closing section of the job description'], title='Closing'
    )
    closing_date: Optional[date] = Field(None, examples=['2020-10-30'])
    closing_html: Optional[str] = Field(
        None,
        description='The closing section of the job description in HTML format',
        title='Closing',
    )
    code: Optional[Code] = None
    confidential: Optional[bool] = Field(None, examples=[False], title='Confidential')
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    deleted: Optional[Deleted] = None
    department: Optional[Department] = None
    description: Optional[Description] = None
    description_html: Optional[str] = Field(
        None,
        description='The job description in HTML format',
        title='Description (HTML)',
    )
    employment_terms: Optional[EmploymentTerms] = Field(None, examples=['full-time'])
    experience: Optional[str] = Field(
        None,
        description='Level of experience required for the job role.',
        examples=['Director/ Vice President'],
        title='Experience',
    )
    followers: Optional[List[str]] = Field(
        None,
        examples=[
            [
                'a0d636c6-43b3-4bde-8c70-85b707d992f4',
                'a98lfd96-43b3-4bde-8c70-85b707d992e6',
            ]
        ],
    )
    hiring_managers: Optional[List[HiringManager]] = Field(None, examples=[['123456']])
    id: Optional[Id] = None
    job_portal_url: Optional[str] = Field(
        None, description='URL of the job portal', title='URL'
    )
    language: Optional[Language] = None
    owner_id: Optional[OwnerId] = None
    published_at: Optional[PublishedAt] = None
    record_url: Optional[RecordUrl] = None
    recruiters: Optional[List[str]] = Field(
        None,
        description='The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant',
        examples=[['a0d636c6-43b3-4bde-8c70-85b707d992f4']],
    )
    remote: Optional[bool] = Field(
        None,
        description='Specifies whether the posting is for a remote job.',
        examples=[True],
        title='Remote',
    )
    requisition_id: Optional[str] = Field(
        None,
        description="A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.",
        examples=['abc123'],
        title='Requisition ID',
    )
    salary: Optional[Salary] = None
    sequence: Optional[int] = Field(
        None, description='Sequence in relation to other jobs.', examples=[3]
    )
    slug: Optional[str] = Field(None, examples=['ceo'])
    status: Optional[JobStatus] = None
    tags: Optional[Tags] = None
    title: Optional[Title] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None
    url: Optional[str] = Field(
        None, description='URL of the job description', title='URL'
    )
    visibility: Optional[Visibility] = Field(
        None, description='The visibility of the job', examples=['internal']
    )


class Offer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    application_id: Optional[str] = Field(
        None, examples=['abc123'], title='Application ID'
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    id: Optional[Id] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class GetJobResponse(BaseModel):
    data: Job
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Jobs']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['lever']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetJobsResponse(BaseModel):
    data: List[Job]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Jobs']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['lever']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )
